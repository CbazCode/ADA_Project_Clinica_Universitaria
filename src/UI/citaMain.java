/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Clases.Cita;
import Clases.Medico;

import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableRowSorter;


/**
 *
 * @author Kioshi
 */
public class citaMain extends javax.swing.JFrame {
    
    private LineBorder border = new LineBorder((new Color(107, 179, 35)),5);
    int xx,xy;
    ArrayList<Cita> citas = new ArrayList<Cita>();
    DefaultTableModel modelo = new DefaultTableModel(){
        public boolean isCellEditable(int rowIndex,int columnIndex){return false;}
        
    };
    
    public citaMain() {
        initComponents();
        this.setLocationRelativeTo(null); 
        this.getRootPane().setBorder(border);
        completarTabla();
        completarDatos();
        
    }
    private static class HeaderRenderer implements TableCellRenderer {
       DefaultTableCellRenderer renderer;

       public HeaderRenderer(JTable table) {
           renderer = (DefaultTableCellRenderer)
               table.getTableHeader().getDefaultRenderer();
           renderer.setHorizontalAlignment(JLabel.CENTER);
       }

       @Override
       public Component getTableCellRendererComponent(
           JTable table, Object value, boolean isSelected,
           boolean hasFocus, int row, int col) {
           return renderer.getTableCellRendererComponent(
               table, value, isSelected, hasFocus, row, col);
       }
    }
    
    private void completarTabla(){
        
        modelo.addColumn("Codigo");
        modelo.addColumn("DNI del paciente");
        modelo.addColumn("Especialidad del m√©dico");
        modelo.addColumn("Fecha");
        modelo.addColumn("Hora");
        modelo.addColumn("Por Pagar");

        TableColumnModel columnModel = tablaTest.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(200);
        columnModel.getColumn(1).setPreferredWidth(200);
        columnModel.getColumn(2).setPreferredWidth(200);
        columnModel.getColumn(3).setPreferredWidth(120);
        columnModel.getColumn(4).setPreferredWidth(110);
        columnModel.getColumn(5).setPreferredWidth(120);
        
        
        JTableHeader header = tablaTest.getTableHeader();
        header.setDefaultRenderer(new HeaderRenderer(tablaTest));
        tablaTest.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        modelo.setRowCount(0);
        completarDatos();
        
        
    }
    public void completarDatos(){
        modelo.setRowCount(0);
        leerArchivo();
    }
    private void leerArchivo() {
       File file = null;
       FileReader fr = null;
       BufferedReader br = null;
       citas.clear();
       try{
           file = new File("src/archivos/cita.txt");
           fr = new FileReader(file);
           br = new BufferedReader(fr);
           Object[] linea = br.lines().toArray();
           for(int i = 0; i<linea.length;i++){
               String[] row = linea[i].toString().split("  ");
               modelo.addRow(row);
               Cita ncita = new Cita();
               ncita.setCodigoHist(Integer.parseInt(row[0]));
               ncita.setDNI(Integer.parseInt(row[1]));
               ncita.setEspecialidad(row[2]);
               ncita.setFechaCita(row[3]);
               ncita.setHoraCita(row[4]);
               ncita.setPorPagar(Float.parseFloat(row[5]));
               citas.add(ncita);
           }
       }catch(Exception e){
           System.out.println("ERROR EN LEER ARCHIVO DE CITA MAIN");
           System.out.println("Error: " + e);
       }
    }
    
    
    /**
     * Creates new form medicoMain
     */
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        textBuscador = new javax.swing.JTextField();
        comboFiltro = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrolTest = new javax.swing.JScrollPane();
        tablaTest = new javax.swing.JTable(modelo);
        jPanel4 = new javax.swing.JPanel();
        bSalir = new javax.swing.JButton();
        bNuevo = new javax.swing.JButton();
        bEditar = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        bporPagar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(107, 179, 35));
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel1MouseDragged(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1MousePressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Citas");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(239, 251, 239));

        jLabel2.setText("Buscar por: ");

        textBuscador.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textBuscadorKeyTyped(evt);
            }
        });

        comboFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Codigo", "DNI", "Especialidad", "Fecha","Hora" , "Precio"}));
        comboFiltro.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel3.setText("Buscar:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textBuscador, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comboFiltro, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(26, 26, 26))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textBuscador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(239, 251, 239));

        tablaTest.getTableHeader().setResizingAllowed(false);
        tablaTest.getTableHeader().setReorderingAllowed(false);
        tablaTest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaTestMouseClicked(evt);
            }
        });
        jScrolTest.setViewportView(tablaTest);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addComponent(jScrolTest, javax.swing.GroupLayout.PREFERRED_SIZE, 956, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrolTest, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(239, 251, 239));

        bSalir.setText("Salir");
        bSalir.setMaximumSize(new java.awt.Dimension(80, 30));
        bSalir.setMinimumSize(new java.awt.Dimension(80, 30));
        bSalir.setPreferredSize(new java.awt.Dimension(80, 30));
        bSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSalirActionPerformed(evt);
            }
        });

        bNuevo.setText("Nuevo");
        bNuevo.setMaximumSize(new java.awt.Dimension(80, 30));
        bNuevo.setMinimumSize(new java.awt.Dimension(80, 30));
        bNuevo.setPreferredSize(new java.awt.Dimension(80, 30));
        bNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNuevoActionPerformed(evt);
            }
        });

        bEditar.setText("Editar");
        bEditar.setMaximumSize(new java.awt.Dimension(80, 30));
        bEditar.setMinimumSize(new java.awt.Dimension(80, 30));
        bEditar.setPreferredSize(new java.awt.Dimension(80, 30));
        bEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEditarActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Codigo", "DNI", "Especialidad", "Fecha","Hora","Precio" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        bporPagar.setText("Pagar");
        bporPagar.setMaximumSize(new java.awt.Dimension(80, 30));
        bporPagar.setMinimumSize(new java.awt.Dimension(80, 30));
        bporPagar.setPreferredSize(new java.awt.Dimension(80, 30));
        bporPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bporPagarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(bNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(bEditar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71)
                .addComponent(bporPagar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bSalir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bEditar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bSalir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bporPagar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x-xx,y-xy);
    }//GEN-LAST:event_jPanel1MouseDragged

    private void jPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MousePressed
        xx=evt.getX();
        xy=evt.getY();
    }//GEN-LAST:event_jPanel1MousePressed
    TableRowSorter trs=null;
    private void textBuscadorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textBuscadorKeyTyped
        if(comboFiltro.getSelectedIndex()==0){
            textBuscador.addKeyListener(new KeyAdapter() {
                public void keyReleased(KeyEvent ke){
                    trs.setRowFilter(RowFilter.regexFilter("(?i)"+textBuscador.getText(), 0));
                }
            });
            trs =new TableRowSorter(modelo);
            tablaTest.setRowSorter(trs);
        }
        if(comboFiltro.getSelectedIndex()==1){
            textBuscador.addKeyListener(new KeyAdapter() {
                public void keyReleased(KeyEvent ke){
                    trs.setRowFilter(RowFilter.regexFilter("(?i)"+textBuscador.getText(), 1));
                }
            });
            trs =new TableRowSorter(modelo);
            tablaTest.setRowSorter(trs);
        }
        if(comboFiltro.getSelectedIndex()==2){
            textBuscador.addKeyListener(new KeyAdapter() {
                public void keyReleased(KeyEvent ke){
                    trs.setRowFilter(RowFilter.regexFilter("(?i)"+textBuscador.getText(), 2));
                }
            });
            trs =new TableRowSorter(modelo);
            tablaTest.setRowSorter(trs);
        }
        if(comboFiltro.getSelectedIndex()==3){
            textBuscador.addKeyListener(new KeyAdapter() {
                public void keyReleased(KeyEvent ke){
                    trs.setRowFilter(RowFilter.regexFilter("(?i)"+textBuscador.getText(), 3));
                }
            });
            trs =new TableRowSorter(modelo);
            tablaTest.setRowSorter(trs);
        }
        if(comboFiltro.getSelectedIndex()==4){
            textBuscador.addKeyListener(new KeyAdapter() {
                public void keyReleased(KeyEvent ke){
                    trs.setRowFilter(RowFilter.regexFilter("(?i)"+textBuscador.getText(), 4));
                }
            });
            trs =new TableRowSorter(modelo);
            tablaTest.setRowSorter(trs);
        }
        if(comboFiltro.getSelectedIndex()==5){
            textBuscador.addKeyListener(new KeyAdapter() {
                public void keyReleased(KeyEvent ke){
                    trs.setRowFilter(RowFilter.regexFilter("(?i)"+textBuscador.getText(), 5));
                }
            });
            trs =new TableRowSorter(modelo);
            tablaTest.setRowSorter(trs);
        }
    }//GEN-LAST:event_textBuscadorKeyTyped

    private void bSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSalirActionPerformed
        dispose();

    }//GEN-LAST:event_bSalirActionPerformed

    private void bNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNuevoActionPerformed
        
        nuevaCita cc= new nuevaCita(this,true);
        cc.setVisible(true);
        if(!cc.isVisible()){
            completarDatos();
        }
    }//GEN-LAST:event_bNuevoActionPerformed

    private void bEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEditarActionPerformed
        
        int filaseleccionada;
        try{
            filaseleccionada= tablaTest.getSelectedRow();
            if (filaseleccionada==-1){
                JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguna fila");
            }
            else{
                
                int codigoCita = Integer.parseInt((String) tablaTest.getValueAt(filaseleccionada, 0));
                int dniUsuario = Integer.parseInt((String) tablaTest.getValueAt(filaseleccionada, 1));
                String especialidadMedico = (String) tablaTest.getValueAt(filaseleccionada, 2);
                String fechaCita = (String) tablaTest.getValueAt(filaseleccionada, 3);
                String horaCita = (String) tablaTest.getValueAt(filaseleccionada, 4);
                float porPagar = Float.parseFloat((String) tablaTest.getValueAt(filaseleccionada, 5));
                Cita cita = new Cita(codigoCita, dniUsuario, especialidadMedico, fechaCita, horaCita, porPagar);

                editaCita ec = new editaCita(this, true);
                ec.recibeDatos(cita);
                ec.setVisible(true);
                if(!ec.isVisible()){
                    completarDatos();

                }
            }
        }catch(HeadlessException ex){
            System.out.println("ERROR EN B_EDITAAR DE CITA MAIN");
            System.err.println("El error es " + ex);
        }
    }//GEN-LAST:event_bEditarActionPerformed

    private void tablaTestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaTestMouseClicked
        if(evt.getClickCount()==2){
            int filaseleccionada;
            try{
                filaseleccionada= tablaTest.getSelectedRow();
                if (filaseleccionada==-1){
                    JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguna fila");
                }
                else{

                    int codigoCita = Integer.parseInt((String) tablaTest.getValueAt(filaseleccionada, 0));
                    int dniUsuario = Integer.parseInt((String)tablaTest.getValueAt(filaseleccionada, 1));
                    String especialidadMedico = (String)tablaTest.getValueAt(filaseleccionada, 2);
                    String fechaCita =(String)tablaTest.getValueAt(filaseleccionada, 3) ;
                    String horaCita = (String) tablaTest.getValueAt(filaseleccionada, 4);
                    float porPagar = Float.parseFloat((String) tablaTest.getValueAt(filaseleccionada, 5));
                    Cita cita = new Cita(codigoCita, dniUsuario, especialidadMedico, fechaCita, horaCita,porPagar);

                    editaCita ec= new editaCita(this,true);
                    ec.recibeDatos(cita);
                    ec.setVisible(true);
                    if(!ec.isVisible()){
                        completarDatos();

                    }
                }
            }catch(HeadlessException ex){
                System.out.println("ERROR EN TABLA TEST DE CITA MAIN");
                System.err.println("El error es " + ex);
            }
        }
    }//GEN-LAST:event_tablaTestMouseClicked

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        //int n = jComboBox1.getSelectedIndex();
        //Item 0, 1, 2, 3
        if(jComboBox1.getSelectedIndex() == 0){
            ordenarCita(true,0,99);
        }
        if(jComboBox1.getSelectedIndex() == 1){
            ordenarCita(true,1,99);
        }
        if(jComboBox1.getSelectedIndex() == 2){
            ordenarCita(false,3,0);
        }
        if(jComboBox1.getSelectedIndex() == 3){
            ordenarCita(false,3,99);
        }
        if(jComboBox1.getSelectedIndex() == 4){
            ordenarCita(false,3,1);
        }
        if(jComboBox1.getSelectedIndex() == 5){
            ordenarCita(true,2,1);
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void bporPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bporPagarActionPerformed
      /* int filaseleccionada;
        try{
            filaseleccionada= tablaTest.getSelectedRow();
            if (filaseleccionada==-1){
                JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguna fila");
            }
            else{
                //ACA METES EL ALGORITMO VORAZ LEONIDAS 
                int codigoCita = Integer.parseInt((String) tablaTest.getValueAt(filaseleccionada, 0));
                int dniUsuario = Integer.parseInt((String) tablaTest.getValueAt(filaseleccionada, 1));
                String especialidadMedico = (String) tablaTest.getValueAt(filaseleccionada, 2);
                String fechaCita = (String) tablaTest.getValueAt(filaseleccionada, 3);
                String horaCita = (String) tablaTest.getValueAt(filaseleccionada, 4);
                float porPagar = Float.parseFloat((String) tablaTest.getValueAt(filaseleccionada, 5));
                Cita cita = new Cita(codigoCita, dniUsuario, especialidadMedico, fechaCita, horaCita,porPagar);

                editaCita ec = new editaCita(this, true);
                ec.recibeDatos(cita);
                ec.setVisible(true);
                if(!ec.isVisible()){
                    completarDatos();
                }
            }
        }catch(HeadlessException ex){
            System.err.println("El error es " + ex);
        }*/
        
    }//GEN-LAST:event_bporPagarActionPerformed

    public void vaciarArchivo(){
        File archivo = new File("src/archivos/cita.txt");
        try {
            PrintWriter salida  = new PrintWriter(archivo);
            salida.print("");
            salida.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace(System.out);
        }
    }
    //Metodo de Seleccion
    public void ordenaCadenas(Cita[] v, int interruptorCadenas)
    {
        int posMin;
        Cita aux;

        for(int i=0;i<v.length-1;i++)
        {
            posMin=i;
            for(int j=i+1;j<v.length;j++){
                if(interruptorCadenas == 0){
                    if(v[posMin].getEspecialidad().compareTo(v[j].getEspecialidad())>0) posMin=j;
                }
                if(interruptorCadenas == 1){
                    if(v[posMin].getHoraCita().compareTo(v[j].getHoraCita())>0) posMin=j;
                }
                              
            }
            if(posMin!=i)
            {
                aux=v[i];
                v[i]=v[posMin];
                v[posMin]=aux;
            }

        }
    }
    public void ordenarCita(boolean numero,int interruptor, int interruptorCadenas){
        Cita arrayCita[] = new Cita[citas.size()];
        for(int i = 0; i<citas.size();i++){
                arrayCita[i]=citas.get(i);
               System.out.println("en ordenado " + arrayCita[i]);
        }
  
        int jump, i, j, k ;
        Cita auxiliar;
        jump = arrayCita.length / 2;
        if(numero == true){
            while (jump > 0) {
                for (i = jump; i < arrayCita.length; i++) {
                    j = i - jump;
                    while (j >= 0) {
                        k = j + jump;
                        if(interruptor == 0){
                            if (arrayCita[j].getCodigoHist() <= arrayCita[k].getCodigoHist()) {
                                j = -1;
                            }
                            else {
                                auxiliar = arrayCita[j];
                                arrayCita[j] = arrayCita[k];
                                arrayCita[k] = auxiliar;
                                j = j - 1;
                            }
                        } 
                        if(interruptor == 1){
                            if (arrayCita[j].getDNI() <= arrayCita[k].getDNI()) {
                                j = -1;
                            }
                            else {
                                auxiliar = arrayCita[j];
                                arrayCita[j] = arrayCita[k];
                                arrayCita[k] = auxiliar;
                                j = j - 1;
                            }
                        }
                        if(interruptor == 2){
                            if (arrayCita[j].getPorPagar() <= arrayCita[k].getPorPagar()) {
                                j = -1;
                            }
                            else {
                                auxiliar = arrayCita[j];
                                arrayCita[j] = arrayCita[k];
                                arrayCita[k] = auxiliar;
                                j = j - 1;
                            }
                        }
                    }
                }
                jump = jump / 2;
            }
        }else{
            if(interruptor == 3){
            ordenaCadenas(arrayCita,interruptorCadenas);
        }
        }
 

        
        
        
        vaciarArchivo();
        
        for (Cita obj : arrayCita) {
            System.out.println(String.valueOf(obj.getCodigoHist())+"  "+String.valueOf(obj.getDNI())+"  "+obj.getEspecialidad()+ "  "+obj.getFechaCita()+ "  "+obj.getHoraCita()+ "  "+obj.getPorPagar());       
            File file = new File("src/archivos/cita.txt");
            FileWriter fichero = null;
            PrintWriter pw = null;
            try
            {
                fichero = new FileWriter(file.getAbsoluteFile(), true);
                pw = new PrintWriter(fichero);

                pw.println(String.valueOf(obj.getCodigoHist())+"  "+String.valueOf(obj.getDNI())+"  "+obj.getEspecialidad()+ "  "+obj.getFechaCita()+ "  "+obj.getHoraCita()+ "  "+obj.getPorPagar());

            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    // Nuevamente aprovechamos el finally para
                    // asegurarnos que se cierra el fichero.
                    if (null != fichero)
                        fichero.close();
                } catch (Exception e2) {
                    e2.printStackTrace();
                }
            }
        }
        modelo.setRowCount(0);
        leerArchivo();
        /*showArray(array);*/
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(citaMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(citaMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(citaMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(citaMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new citaMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bEditar;
    private javax.swing.JButton bNuevo;
    private javax.swing.JButton bSalir;
    private javax.swing.JButton bporPagar;
    private javax.swing.JComboBox<String> comboFiltro;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrolTest;
    private javax.swing.JTable tablaTest;
    private javax.swing.JTextField textBuscador;
    // End of variables declaration//GEN-END:variables
}
